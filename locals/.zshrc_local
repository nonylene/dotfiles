# vim: filetype=zsh

# # ssh-agent

# SSH_AUTH_SOCK_LINK="${HOME}/.ssh/ssh_auth_sock"

# # server
# if [[ -n "$SSH_AUTH_SOCK" && "$SSH_AUTH_SOCK" != "$SSH_AUTH_SOCK_LINK" ]]; then
#   mkdir -p $(dirname "$SSH_AUTH_SOCK_LINK")
#   ln -sf "$SSH_AUTH_SOCK" "$SSH_AUTH_SOCK_LINK"
# fi
# export SSH_AUTH_SOCK="$SSH_AUTH_SOCK_LINK"

# # client
# if [ ! -S "$SSH_AUTH_SOCK_LINK" ]; then
#   eval `ssh-agent`
#   mkdir -p $(dirname "$SSH_AUTH_SOCK_LINK")
#   ln -sf "$SSH_AUTH_SOCK" "$SSH_AUTH_SOCK_LINK"
# fi
# export SSH_AUTH_SOCK="$SSH_AUTH_SOCK_LINK"

# # For WSL
# ssh-add -l >/dev/null 2>&1
# SSH_ADD_CODE=$?
#
# # client (WSL)
# if [[ ! -S "$SSH_AUTH_SOCK_LINK" || $SSH_ADD_CODE = 2 ]]; then
#   unset SSH_AUTH_SOCK
#   rm -rf /tmp/ssh-*
#   eval `ssh-agent`
#   mkdir -p $(dirname "$SSH_AUTH_SOCK_LINK")
#   ln -sf "$SSH_AUTH_SOCK" "$SSH_AUTH_SOCK_LINK"
# fi

# ssh-add -l > /dev/null || ssh-add

# # launch_tmux
# launch_tmux=true
#
# # homebrew
# export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
# export HOMEBREW_NO_ANALYTICS=1
# export HOMEBREW_NO_AUTO_UPDATE=1
#
# fpath=(/usr/local/share/zsh-completions $fpath)
#
# # LaTeX
# export PATH="/usr/local/texlive/2019basic/bin/x86_64-darwin:$PATH"
#
# # kubectl
# source <(kubectl completion zsh)
#

# # WSL open with explorer
#
# function explorer {
#   (cd $1 && explorer.exe .)
# }
